generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum State {
  Activo
  Inactivo
}

enum Tfondo {
  Publico
  Privado
}

enum Role {
  checkinero
  digitador
  operario
}

model Usuario {
  idUsuario    Int           @id @default(autoincrement())
  name         String
  lastname     String
  email        String        @unique
  password     String
  status       State
  role         Role
  sedeId       Int? // Relación opcional con Sede
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  checkins     Checkin[]     @relation("CheckineroCheckins")
  servicios    Servicio[]    @relation("OperarioServicios")
  atendidos    Servicio[]    @relation("CheckineroServicios")
  fechaCierres FechaCierre[] @relation("DigitadorFechaCierres")

  sede Sede? @relation(fields: [sedeId], references: [idSede])

  @@index([email])
  @@index([role])
}

model Sede {
  idSede    Int       @id @default(autoincrement())
  nombre    String
  direccion String?
  telefono  String?
  usuarios  Usuario[] // Relación inversa con Usuario
  clientes  Cliente[] // Relación inversa con Cliente

  @@unique([nombre])
}

model Checkin {
  idCheckin     Int       @id @default(autoincrement())
  planilla      Int
  sello         Int
  clienteId     Int
  clientes      Cliente   @relation(fields: [clienteId], references: [idCliente])
  declarado     Int
  rutaLlegadaId Int? // Relación con la tabla RutaLlegada
  fechaRegistro DateTime
  checkineroId  Int
  checkinero    Usuario   @relation("CheckineroCheckins", fields: [checkineroId], references: [idUsuario])
  fondoId       Int
  fondo         Fondo     @relation(fields: [fondoId], references: [idFondo])
  servicio      Servicio?

  rutaLlegada RutaLlegada? @relation(fields: [rutaLlegadaId], references: [idRutaLlegada])

  @@index([clienteId])
  @@index([checkineroId])
  @@index([fondoId])
  @@index([rutaLlegadaId])
}

model RutaLlegada {
  idRutaLlegada Int       @id @default(autoincrement())
  nombre        String    @unique
  descripcion   String?
  checkins      Checkin[] // Relación inversa con Checkin

  @@map("rutas_llegada") // Opcional: para usar un nombre de tabla personalizado en la base de datos
}

model Servicio {
  idServicio    Int          @id @default(autoincrement())
  planilla      Int
  sello         Int
  fecharegistro DateTime     @default(now())
  estado        State
  observacion   String
  diferencia    Int
  B_100000      Int?
  B_50000       Int?
  B_20000       Int?
  B_10000       Int?
  B_5000        Int?
  B_2000        Int?
  Sum_B         Int
  fechaCierreId Int?
  clienteId     Int
  clientes      Cliente      @relation(fields: [clienteId], references: [idCliente])
  checkin_id    Int          @unique
  checkin       Checkin      @relation(fields: [checkin_id], references: [idCheckin])
  checkineroId  Int
  checkinero    Usuario      @relation("CheckineroServicios", fields: [checkineroId], references: [idUsuario])
  fondoId       Int
  fondo         Fondo        @relation(fields: [fondoId], references: [idFondo])
  operarioId    Int
  operario      Usuario      @relation("OperarioServicios", fields: [operarioId], references: [idUsuario])
  fecha_cierre  FechaCierre?

  @@index([clienteId])
  @@index([checkineroId])
  @@index([fondoId])
  @@index([operarioId])
}

model FechaCierre {
  idFechaCierre  Int      @id @default(autoincrement())
  fecha_a_cerrar DateTime
  digitadorId    Int
  digitador      Usuario  @relation("DigitadorFechaCierres", fields: [digitadorId], references: [idUsuario])
  fondoId        Int
  fondo          Fondo    @relation(fields: [fondoId], references: [idFondo])
  servicioId     Int      @unique
  servicio       Servicio @relation(fields: [servicioId], references: [idServicio])

  @@index([servicioId])
  @@index([fondoId])
}

model Cliente {
  idCliente Int        @id @default(autoincrement())
  name      String?
  sedeId    Int? // Relación opcional con Sede
  fondoId   Int
  fondo     Fondo      @relation(fields: [fondoId], references: [idFondo])
  checkin   Checkin[]
  servicio  Servicio[]

  sede Sede? @relation(fields: [sedeId], references: [idSede])

  @@index([fondoId])
}

model Fondo {
  idFondo         Int           @id @default(autoincrement())
  nombre          String
  tipo            Tfondo
  clientes        Cliente[]
  checkins        Checkin[]
  servicios       Servicio[]
  fecha_de_cierre FechaCierre[]
}
